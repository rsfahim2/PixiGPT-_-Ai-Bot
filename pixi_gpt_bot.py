import os
import sqlite3 # SQLite ржХрзЛржб рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗ рждржмрзЗ Firebase ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржмрзЗ
import asyncio
from datetime import datetime, timedelta

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
)

# ржЧрзБржЧрж▓ ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐
import google.generativeai as genai

# Firebase Admin SDK
import firebase_admin
from firebase_admin import credentials, firestore

# --- ржЖржкржирж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рждржерзНржп (ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржерзЗржХрзЗ ржирзЗржУржпрж╝рж╛ рж╣ржмрзЗ) ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = int(os.environ.get("TELEGRAM_CHANNEL_ID", "-1002161374444")) # ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЖржЗржбрж┐
TELEGRAM_CHANNEL_LINK = os.environ.get("TELEGRAM_CHANNEL_LINK", "https://t.me/pixigpt") # ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржорзНржкрзВрж░рзНржг рж▓рж┐ржЩрзНржХ

# ржХрзЛржЯрж╛ рж╕рзЗржЯрж┐ржВрж╕
FREE_MESSAGE_LIMIT = 15 # ржкрзНрж░рждрж┐ржжрж┐ржи ржлрзНрж░рж┐ ржкрзНрж▓рзНржпрж╛ржирзЗ рззрзлржЯрж┐ ржорзЗрж╕рзЗржЬ
PREMIUM_MESSAGE_LIMIT = 999999999 # ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржкрзНрж▓рзНржпрж╛ржирзЗ ржЖржирж▓рж┐ржорж┐ржЯрзЗржб ржорзЗрж╕рзЗржЬ

# --- API ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ---
GOOGLE_GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY") 

# ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржкрж░рж┐ржмрзЗрж╢ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ
if not TELEGRAM_BOT_TOKEN:
    print("Error: TELEGRAM_BOT_TOKEN environment variable not set.")
    exit(1)
if not GOOGLE_GEMINI_API_KEY:
    print("Error: GEMINI_API_KEY environment variable not set.")
    exit(1)

genai.configure(api_key=GOOGLE_GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-pro')

# --- Firebase рж╕рзЗржЯржЖржк ---
FIREBASE_SERVICE_ACCOUNT_KEY = os.environ.get("FIREBASE_SERVICE_ACCOUNT_KEY")

if not FIREBASE_SERVICE_ACCOUNT_KEY:
    print("Error: FIREBASE_SERVICE_ACCOUNT_KEY environment variable not set.")
    print("Please add your Firebase service account JSON content as an environment variable.")
    exit(1)

try:
    # Service Account Key ржПржХржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ рж╣рж┐рж╕рзЗржмрзЗ ржЖрж╕ржмрзЗ, ржПржЯрж┐ржХрзЗ JSON ржЕржмржЬрзЗржХрзНржЯрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рждрзЗ рж╣ржмрзЗ
    import json
    cred_json = json.loads(FIREBASE_SERVICE_ACCOUNT_KEY)
    cred = credentials.Certificate(cred_json)
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    print("Firebase initialized successfully.")
except Exception as e:
    print(f"Error initializing Firebase: {e}")
    exit(1)

# --- ржЗржЙржЯрж┐рж▓рж┐ржЯрж┐ ржлрж╛ржВрж╢ржи (Firebase ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ) ---

# SQLite ржлрж╛ржВрж╢ржиржЧрзБрж▓рзЛ рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗ, рждржмрзЗ Firebase ржПрж░ рж╕ржорждрзБрж▓рзНржп ржлрж╛ржВрж╢ржи ржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗ
# ржбрзЗржЯрж╛ржмрзЗржЬ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░: users/user_id -> {telegram_name, language, plan_type, daily_message_count, last_message_date, referral_code, referred_by_id, referral_points}

async def get_user_data(user_id):
    doc_ref = db.collection('users').document(str(user_id))
    doc = await doc_ref.get() # await ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рж▓рзЗ ржХрзЛржбрзЗрж░ ржмрж╛ржХрж┐ ржЕржВрж╢ async рж╣рждрзЗ рж╣ржмрзЗ
    if doc.exists:
        return doc.to_dict()
    return None

async def update_user_data(user_id, **kwargs):
    doc_ref = db.collection('users').document(str(user_id))
    await doc_ref.set(kwargs, merge=True)

async def create_user_if_not_exists(user_id, telegram_name):
    user_data = await get_user_data(user_id)
    if not user_data:
        initial_data = {
            'telegram_name': telegram_name,
            'language': 'en',
            'plan_type': 'free',
            'daily_message_count': 0,
            'last_message_date': datetime.now().strftime('%Y-%m-%d'),
            'referral_code': f"REF{user_id}", # ржЗржирж┐рж╢рж┐рзЯрж╛рж▓ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб
            'referred_by_id': None,
            'referral_points': 0
        }
        await db.collection('users').document(str(user_id)).set(initial_data)

async def reset_daily_counts_firebase():
    # Firestore ржП рж╕ржорж╕рзНржд ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЬржирзНржп ржжрзИржирж┐ржХ ржХрж╛ржЙржирзНржЯрж╛рж░ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛
    # ржПржЯрж┐ ржкрзНрж░рждрж┐ржжрж┐ржи ржоржзрзНржпрж░рж╛рждрзЗ ржПржХржмрж╛рж░ ржХрж▓ ржХрж░рждрзЗ рж╣ржмрзЗ
    today_str = datetime.now().strftime('%Y-%m-%d')
    users_ref = db.collection('users')
    
    # Firestore query for users whose last_message_date is not today
    # Note: Firestore does not support 'not equal to' queries directly on indexed fields.
    # A more robust solution for large databases involves periodically running a Cloud Function
    # to reset counts, or handling it on per-user basis upon their first message of the day.
    # For now, we'll keep it simple for illustration.
    
    # Simpler approach: update only when user sends message on new day
    # This function would mainly be for a general reset if needed for admin purposes
    # For this bot, the reset logic is handled in handle_message for each user.
    print("Firebase daily counts will be reset per user activity or via Cloud Function.")

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржлрж╛ржВрж╢ржи ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or update.effective_user.username or "User"
    await create_user_if_not_exists(user_id, user_name)

    if context.args:
        referrer_code = context.args[0]
        referrer_doc = await db.collection('users').where('referral_code', '==', referrer_code).get()
        
        referrer_id = None
        for doc in referrer_doc:
            referrer_id = int(doc.id)
            break
        
        user_data = await get_user_data(user_id) # ржЧрзЗржЯ рж▓рзЗржЯрзЗрж╕рзНржЯ ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛
        
        if referrer_id and user_id != referrer_id and (user_data['referred_by_id'] is None):
            await update_user_data(user_id, referred_by_id=referrer_id)
            referrer_current_points = (await get_user_data(referrer_id)).get('referral_points', 0)
            await update_user_data(referrer_id, referral_points=referrer_current_points + 2)
            await update.message.reply_text(f"ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ `{referrer_code}` ржжрзНржмрж╛рж░рж╛ рж░рзЗржлрж╛рж░ рж╣ржпрж╝рзЗржЫрзЗржи! ржПржмржВ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ 2 ржкржпрж╝рзЗржирзНржЯ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред", parse_mode='Markdown')

    await send_welcome_message(update, context)


async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or update.effective_user.username or "User"
    user_data = await get_user_data(user_id) # async call
    user_lang = user_data.get('language', 'en')

    messages = {
        'en': (
            f"ЁЯМЯ **Welcome to PixiGPT, {user_name}!** ЁЯМЯ\n\n"
            "I'm your personal AI assistant, ready to chat and help you with anything you need.\n\n"
            "To unlock my full potential and start exploring, please join our official Telegram channel:\n"
            f"ЁЯСЙ {TELEGRAM_CHANNEL_LINK}\n\n"
            "Once you've joined, just type anything, and we'll get started! Let's create something amazing together. тЬи"
        ),
        'bn': (
            f"ЁЯМЯ **PixiGPT-рждрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо, {user_name}!** ЁЯМЯ\n\n"
            "ржЖржорж┐ ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд ржПржЖржЗ рж╕рж╣ржХрж╛рж░рзА, ржЖржкржирж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА ржЪрзНржпрж╛ржЯ ржХрж░рждрзЗ ржПржмржВ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрзНрж░рж╕рзНрждрзБрждред\n\n"
            "ржЖржорж╛рж░ рж╕ржорзНржкрзВрж░рзНржг ржХрзНрж╖ржорждрж╛ ржЖржирж▓ржХ ржХрж░рждрзЗ ржПржмржВ ржПржХрзНрж╕ржкрзНрж▓рзЛрж░ ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░рждрзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи:\n"
            f"ЁЯСЙ {TELEGRAM_CHANNEL_LINK}\n\n"
            "ржПржХржмрж╛рж░ ржпрзЛржЧржжрж╛ржирзЗрж░ ржкрж░, ржпрзЗржХрзЛржирзЛ ржХрж┐ржЫрзБ ржЯрж╛ржЗржк ржХрж░рзБржи, ржПржмржВ ржЖржорж░рж╛ рж╢рзБрж░рзБ ржХрж░ржм! ржЪрж▓рзБржи ржПржХрж╕рж╛ржерзЗ ржЕрж╕рж╛ржзрж╛рж░ржг ржХрж┐ржЫрзБ рждрзИрж░рж┐ ржХрж░рж┐ред тЬи"
        ),
        'es': (
            f"ЁЯМЯ **┬бBienvenido a PixiGPT, {user_name}!** ЁЯМЯ\n\n"
            "Soy tu asistente personal de IA, lista para chatear y ayudarte con todo lo que necesites.\n\n"
            "Para desbloquear todo mi potencial y empezar a explorar, por favor ├║nete a nuestro canal oficial de Telegram:\n"
            f"ЁЯСЙ {TELEGRAM_CHANNEL_LINK}\n\n"
            "Una vez que te hayas unido, ┬бsimplemente escribe algo y empezaremos! Creemos algo incre├нble juntos. тЬи"
        ),
        'id': (
            f"ЁЯМЯ **Selamat datang di PixiGPT, {user_name}!** ЁЯМЯ\n\n"
            "Saya asisten AI pribadi Anda, siap untuk mengobrol dan membantu Anda dengan apa pun yang Anda butuhkan.\n\n"
            "Untuk membuka potensi penuh saya dan mulai menjelajah, silakan bergabung dengan saluran Telegram resmi kami:\n"
            f"ЁЯСЙ {TELEGRAM_CHANNEL_LINK}\n\n"
            "Setelah Anda bergabung, cukup ketik apa saja, dan kita akan mulai! Mari ciptakan sesuatu yang luar biasa bersama. тЬи"
        )
    }
    
    keyboard = [[InlineKeyboardButton("Join Channel", url=TELEGRAM_CHANNEL_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await (update.message or update.callback_query).reply_text(
        messages.get(user_lang, messages['en']), reply_markup=reply_markup, parse_mode='Markdown'
    )


async def check_channel_membership(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    
    try:
        chat_member = await context.bot.get_chat_member(TELEGRAM_CHANNEL_ID, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            return True
        else:
            await send_welcome_message(update, context)
            return False
    except Exception as e:
        print(f"Error checking channel membership for user {user_id}: {e}")
        # ржЪрзНржпрж╛ржирзЗрж▓ ржЦрзБржБржЬрзЗ ржирж╛ ржкрзЗрж▓рзЗ ржмрж╛ ржЕржирзНржп рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржзрж░рзЗ ржирзЗржУржпрж╝рж╛ рж╣ржпрж╝ рж╕ржжрж╕рзНржп ржиржпрж╝
        await send_welcome_message(update, context) 
        return False

async def language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = await get_user_data(update.effective_user.id)
    user_lang = user_data.get('language', 'en')
    
    keyboard = [
        [InlineKeyboardButton("English ЁЯЗмЁЯЗз", callback_data='lang_en')],
        [InlineKeyboardButton("ржмрж╛ржВрж▓рж╛ ЁЯЗзЁЯЗй", callback_data='lang_bn')],
        [InlineKeyboardButton("Espa├▒ol ЁЯЗкЁЯЗ╕", callback_data='lang_es')],
        [InlineKeyboardButton("Bahasa Indonesia ЁЯЗоЁЯЗй", callback_data='lang_id')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    messages = {
        'en': "Please choose your language:",
        'bn': "ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        'es': "Por favor, elige tu idioma:",
        'id': "Silakan pilih bahasa Anda:"
    }
    
    await (update.message or update.callback_query).reply_text(
        messages.get(user_lang, messages['en']), reply_markup=reply_markup
    )

async def handle_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    lang_code = query.data.split('_')[1]

    await update_user_data(user_id, language=lang_code)
    
    messages = {
        'en': "Language set to English. Now, let's explore PixiGPT!",
        'bn': "ржнрж╛рж╖рж╛ ржмрж╛ржВрж▓рж╛рждрзЗ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржПржмрж╛рж░ ржЪрж▓рзБржи PixiGPT ржПржХрзНрж╕ржкрзНрж▓рзЛрж░ ржХрж░рж┐!",
        'es': "Idioma configurado a Espa├▒ol. ┬бAhora, exploremos PixiGPT!",
        'id': "Bahasa diatur ke Bahasa Indonesia. Sekarang, mari jelajahi PixiGPT!"
    }
    await query.answer()
    await query.edit_message_text(messages.get(lang_code, messages['en']))
    await set_bot_commands(context.bot) # ржХржорж╛ржирзНржб рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
    await send_main_menu(update, context)


async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_lang = user_data.get('language', 'en')

    messages = {
        'en': "What would you like to do?",
        'bn': "ржЖржкржирж┐ ржХрж┐ ржХрж░рждрзЗ ржЪрж╛ржи?",
        'es': "┬┐Qu├й te gustar├нa hacer?",
        'id': "Apa yang ingin Anda lakukan?"
    }

    keyboard = [
        [InlineKeyboardButton("ЁЯТм Chat with AI", callback_data='chat_ai')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await (update.message or update.callback_query).reply_text(
        messages.get(user_lang, messages['en']), reply_markup=reply_markup
    )


async def handle_main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    # context.user_data ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЖржЧрзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи user_data рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ
    # user_data = await get_user_data(user_id) # ржпржжрж┐ ржПржЦрж╛ржирзЗ ржжрж░ржХрж╛рж░ рж╣ржпрж╝

    if query.data == 'chat_ai':
        chat_messages = {
            'en': "You can now chat with PixiGPT. Type your message:",
            'bn': "ржПржЦржи ржЖржкржирж┐ PixiGPT-ржПрж░ рж╕рж╛ржерзЗ ржЪрзНржпрж╛ржЯ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред ржЖржкржирж╛рж░ ржорзЗрж╕рзЗржЬ ржЯрж╛ржЗржк ржХрж░рзБржи:",
            'es': "Ahora puedes chatear con PixiGPT. Escribe tu mensaje:",
            'id': "Anda sekarang dapat mengobrol dengan PixiGPT. Ketik pesan Anda:"
        }
        await query.edit_message_text(chat_messages.get('en', chat_messages['en'])) # ржнрж╛рж╖рж╛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзЗ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ
        context.user_data['current_mode'] = 'chat_ai'


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await check_channel_membership(update, context):
        return

    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_lang = user_data.get('language', 'en')
    current_plan = user_data.get('plan_type', 'free')
    daily_msg_count = user_data.get('daily_message_count', 0)
    last_msg_date_str = user_data.get('last_message_date', datetime.now().strftime('%Y-%m-%d'))
    
    today_str = datetime.now().strftime('%Y-%m-%d')
    if last_msg_date_str != today_str:
        daily_msg_count = 0
        await update_user_data(user_id, daily_message_count=0, last_message_date=today_str)

    message_limit = FREE_MESSAGE_LIMIT if current_plan == 'free' else PREMIUM_MESSAGE_LIMIT

    if 'current_mode' in context.user_data and context.user_data['current_mode'] == 'chat_ai':
        if daily_msg_count >= message_limit:
            quota_messages = {
                'en': (
                    "You have reached your daily message limit. "
                    "Upgrade to premium for unlimited messages, or wait until tomorrow!"
                ),
                'bn': (
                    "ржЖржкржирж╛рж░ ржжрзИржирж┐ржХ ржорзЗрж╕рзЗржЬ рж╕рзАржорж╛ ржкрзМржБржЫрзЗ ржЧрзЗржЫрзЗред "
                    "ржЖржирж▓рж┐ржорж┐ржЯрзЗржб ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржорзЗ ржЖржкржЧрзНрж░рзЗржб ржХрж░рзБржи, ржЕржержмрж╛ ржЖржЧрж╛ржорзАржХрж╛рж▓рзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи!"
                ),
                'es': (
                    "Has alcanzado tu l├нmite diario de mensajes. "
                    "┬бActualiza a premium para mensajes ilimitados, o espera hasta ma├▒ana!"
                ),
                'id': (
                    "Anda telah mencapai batas pesan harian Anda. "
                    "Tingkatkan ke premium untuk pesan tanpa batas, atau tunggu sampai besok!"
                )
            }
            await update.message.reply_text(quota_messages.get(user_lang, quota_messages['en']))
            return

        user_message = update.message.text
        processing_messages = {
            'en': "Thinking...",
            'bn': "ржнрж╛ржмржЫрж┐...",
            'es': "Pensando...",
            'id': "Sedang berpikir..."
        }
        await update.message.reply_text(processing_messages.get(user_lang, processing_messages['en']))

        try:
            response = gemini_model.generate_content(user_message)
            ai_response = response.text
        except Exception as e:
            print(f"Error calling Gemini API: {e}")
            error_messages = {
                'en': "Sorry, I couldn't process your request right now. Please try again later.",
                'bn': "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
                'es': "Lo siento, no pude procesar tu solicitud en este momento. Por favor, int├йntalo de nuevo m├бs tarde.",
                'id': "Maaf, saya tidak dapat memproses permintaan Anda saat ini. Silakan coba lagi nanti."
            }
            ai_response = error_messages.get(user_lang, error_messages['en'])
        
        await update.message.reply_text(ai_response)
        
        await update_user_data(user_id, daily_message_count=daily_msg_count + 1)

    else:
        await send_main_menu(update, context)

async def account_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    if not user_data:
        await update.message.reply_text("ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред")
        return

    user_name = user_data.get('telegram_name', 'User')
    user_lang = user_data.get('language', 'en')
    plan_type = user_data.get('plan_type', 'free')
    daily_msg_count = user_data.get('daily_message_count', 0)
    last_msg_date_str = user_data.get('last_message_date', datetime.now().strftime('%Y-%m-%d'))
    referral_code = user_data.get('referral_code', f"REF{user_id}")
    referred_by_id = user_data.get('referred_by_id')
    referral_points = user_data.get('referral_points', 0)

    today_str = datetime.now().strftime('%Y-%m-%d')
    if last_msg_date_str != today_str:
        daily_msg_count = 0
        await update_user_data(user_id, daily_message_count=0, last_message_date=today_str)

    message_limit = FREE_MESSAGE_LIMIT if plan_type == 'free' else PREMIUM_MESSAGE_LIMIT
    
    messages = {
        'en': (
            "**Account Information:**\n"
            f"Telegram Name: `{user_name}`\n"
            f"Current Plan: `{plan_type.capitalize()}`\n"
            f"Messages Used Today: `{daily_msg_count}/{message_limit}`\n"
            f"Referral Points: `{referral_points}`\n\n"
            "To upgrade to premium for unlimited messages, contact admin: @rs_fahim_crypto"
        ),
        'bn': (
            "**ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп:**\n"
            f"ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржирж╛ржо: `{user_name}`\n"
            f"ржмрж░рзНрждржорж╛ржи ржкрзНрж▓рзНржпрж╛ржи: `{plan_type.capitalize()}`\n"
            f"ржЖржЬржХрзЗрж░ ржмрзНржпржмрж╣рзГржд ржорзЗрж╕рзЗржЬ: `{daily_msg_count}/{message_limit}`\n"
            f"рж░рзЗржлрж╛рж░рзЗрж▓ ржкржпрж╝рзЗржирзНржЯ: `{referral_points}`\n\n"
            "ржЖржирж▓рж┐ржорж┐ржЯрзЗржб ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржорзЗ ржЖржкржЧрзНрж░рзЗржб ржХрж░рждрзЗ, ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: @rs_fahim_crypto"
        ),
        'es': (
            "**Informaci├│n de la cuenta:**\n"
            f"Nombre de Telegram: `{user_name}`\n"
            f"Plan actual: `{plan_type.capitalize()}`\n"
            f"Mensajes usados hoy: `{daily_msg_count}/{message_limit}`\n"
            f"Puntos de referencia: `{referral_points}`\n\n"
            "Para actualizar a premium para mensajes ilimitados, contacta al administrador: @rs_fahim_crypto"
        ),
        'id': (
            "**Informasi Akun:**\n"
            f"Nama Telegram: `{user_name}`\n"
            f"Paket Saat Ini: `{plan_type.capitalize()}`\n"
            f"Pesan yang Digunakan Hari Ini: `{daily_msg_count}/{message_limit}`\n"
            f"Poin Referral: `{referral_points}`\n\n"
            "Untuk meningkatkan ke premium untuk pesan tak terbatas, hubungi admin: @rs_fahim_crypto"
        )
    }
    await update.message.reply_text(messages.get(user_lang, messages['en']), parse_mode='Markdown')

async def generate_referral_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_lang = user_data.get('language', 'en')

    if not user_data:
        await update.message.reply_text("ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред")
        return

    referral_code = user_data.get('referral_code', f"REF{user_id}")
    # ржпржжрж┐ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рждрзИрж░рж┐ ржХрж░рзБржи
    if user_data.get('referral_code') is None:
        await update_user_data(user_id, referral_code=referral_code)
        
    referral_link = f"https://t.me/{context.bot.username}?start={referral_code}"

    messages = {
        'en': (
            "**Your Referral System:**\n"
            "Share this link with your friends to earn points!\n"
            f"Your Referral Link: `{referral_link}`\n"
            f"Your Referral Code: `{referral_code}`\n\n"
            "You get 2 points for each successful referral."
        ),
        'bn': (
            "**ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕рж┐рж╕рзНржЯрзЗржо:**\n"
            "ржкржпрж╝рзЗржирзНржЯ ржЕрж░рзНржЬржирзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ ржПржЗ рж▓рж┐ржЩрзНржХржЯрж┐ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи!\n"
            f"ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ: `{referral_link}`\n"
            f"ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб: `{referral_code}`\n\n"
            "ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржлрж▓ рж░рзЗржлрж╛рж░рзЗ ржЖржкржирж┐ 2 ржкржпрж╝рзЗржирзНржЯ ржкрж╛ржмрзЗржиред"
        ),
        'es': (
            "**Tu sistema de referidos:**\n"
            "┬бComparte este enlace con tus amigos para ganar puntos!\n"
            f"Tu enlace de referid